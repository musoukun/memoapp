// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  memos          Note[]
  username       String?  @unique
  passwordDigest String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  kanbans        Kanban[] // Add this line to create the opposite relation field
}

model Kanban {
  id        String         @id @default(uuid())
  userId    String
  title     String         @default("New Kanban")
<<<<<<< HEAD
  home      Boolean        @default(false)
  main     Boolean        @default(false) 
=======
  columns   Json           @default("{}")
>>>>>>> 32d9c58 (カンバン機能の立て直し、設計と実装をすべてやり直した。残りは永続化のみ)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id] , onDelete: Cascade)

  @@index([userId], name: "index_kanbans_on_user_id")
}

<<<<<<< HEAD
model KanbanColumn {
  id        String       @id @default(uuid())
  kanbanId  String
  title     String       
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  kanban    Kanban       @relation(fields: [kanbanId], references: [id], onDelete: Cascade)
  cards     KanbanCard[]

  @@index([kanbanId], name: "index_kanban_columns_on_kanban_id")
}

model KanbanCard {
  id         String       @id @default(uuid())
  columnId   String
  title      String
  description String?
  status     String?       
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  column     KanbanColumn @relation(fields: [columnId], references: [id] , onDelete: Cascade)

  @@index([columnId], name: "index_kanban_cards_on_column_id")
}

=======
>>>>>>> 32d9c58 (カンバン機能の立て直し、設計と実装をすべてやり直した。残りは永続化のみ)
model Note {
  id                String    @id @default(uuid())
  userId            String
  sections          Section[] // NoteからSectionへの一対多のリレーションを追加
  icon              String    @default("📝")
  title             String    @default("")
  description       Json      @default("{}")
  position          Int?
  favorite          Boolean   @default(false)
  favoritePosition  Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastAccessedAt    DateTime  @default(now())
  accessCount       Int       @default(0)
  user              User      @relation(fields: [userId], references: [id])

  @@index([userId], name: "index_memos_on_user_id")
  @@index([lastAccessedAt], name: "index_memos_on_last_accessed_at")
}

model Section {
  id         String   @id @default(uuid())
  memoId     String
  title      String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  memo       Note     @relation(fields: [memoId], references: [id])

  @@index([memoId], name: "index_sections_on_memo_id")
}
  